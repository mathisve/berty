syntax = "proto3";
package daemon;
option go_package = "./daemon";

// ConnectToPeer
message ConnectToPeer {
  message Request {
    string host = 1;
    string port = 2;
  }

  message Response {}
}

// ReplicationJoinGroup
message ReplicationJoinGroup {
  message Request {
    string groupName = 1;
    // invite gob
    bytes invite = 2;
  }

  message Response {}
}

// UploadLogs
message UploadLogs {
  message Request {
    string folder = 1;
    string name = 2;
  }
  message Response {}
}

// CreateInvite
message CreateInvite {
  message Request {
    string groupName = 1;
  }

  message Response {
    // invite gob
    bytes invite = 1;
  }
}

// JoinGroup
message JoinGroup {
  message Request {
    string groupName = 1;
    // invite gob
    bytes invite = 2;
  }

  message Response {}
}

// StartReceiveMessage
message StartReceiveMessage {
  message Request {
    string groupName = 1;
  }
  message Response {}
}

// StopReceiveMessage
message StopReceiveMessage {
  message Request {
    string groupName = 1;
  }

  message Response {}
}

// TestConnection
message TestConnection {
  message Request {
    string message = 1;
  }

  message Response {
    bool success = 1;
  }

}

// IsTestRunning
message IsTestRunning {
  message Request {
    string groupName = 1;
    string testName = 2;
  }

  message Response {
    bool testIsRunning = 1;
  }
}

// NewTest
message NewTest {
  message Request {
    string groupName = 1;
    string testName = 2;
    string type = 3;
    int64 size = 4;
    int64 interval = 5;
  }

  message Response {}
}

// StartTest
message StartTest {
  message Request {
    string groupName = 1;
    string testName = 2;
    int64 duration = 3;
  }

  message Response {}
}

service Peer {
  rpc TestConnection(TestConnection.Request) returns (TestConnection.Response) {}
  rpc ConnectToPeer(ConnectToPeer.Request) returns (ConnectToPeer.Response) {}
  rpc UploadLogs(UploadLogs.Request) returns (UploadLogs.Response) {}

}

service Group {
  rpc TestConnection(TestConnection.Request) returns (TestConnection.Response) {}
  rpc CreateInvite(CreateInvite.Request) returns (CreateInvite.Response) {}
  rpc JoinGroup(JoinGroup.Request) returns (JoinGroup.Response) {}
  rpc StartReceiveMessage(StartReceiveMessage.Request) returns (StartReceiveMessage.Response) {}
  rpc StopReceiveMessage(StopReceiveMessage.Request) returns (StopReceiveMessage.Response) {}
  rpc ReplicationJoinGroup(ReplicationJoinGroup.Request) returns (ReplicationJoinGroup.Response) {}
}

service Test {
  rpc TestConnection(TestConnection.Request) returns (TestConnection.Response) {}
  rpc NewTest(NewTest.Request) returns (NewTest.Response) {}
  rpc StartTest(StartTest.Request) returns (StartTest.Response) {}
  rpc IsTestRunning(IsTestRunning.Request) returns (IsTestRunning.Response) {}
}
